# GitHub Actions Workflow for Math MCP Server Deployment
# Triggers on merge to main branch

name: Deploy Math MCP Server

on:
  push:
    branches: [ main ]
    paths:
      - 'src/mcpdemo/math_server.py'
      - 'requirements.txt'
      - 'app.py'
      - 'gunicorn.conf.py'
      - 'startup.py'
      - '.github/workflows/deploy-math-server.yml'
  
  # Allows manual trigger
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: app-math-zee
  AZURE_RESOURCE_GROUP: rg-test-zee
  PYTHON_VERSION: '3.11'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
    
    - name: Install dependencies
      run: |
        source venv/bin/activate
        pip install -r requirements.txt
    
    - name: Create deployment package
      run: |
        # Create deployment directory
        mkdir -p deploy-package
        
        # Copy application files
        cp app.py deploy-package/
        cp requirements.txt deploy-package/
        cp gunicorn.conf.py deploy-package/
        cp startup.py deploy-package/
        cp web.config deploy-package/ 2>/dev/null || echo "web.config not found, skipping"
        
        # Copy source code
        cp -r src/ deploy-package/
        
        # Remove __pycache__ directories
        find deploy-package -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find deploy-package -name "*.pyc" -delete 2>/dev/null || true
        
        # Show package contents
        echo "=== Deployment Package Contents ==="
        find deploy-package -type f | head -20
    
    - name: Test math server import
      run: |
        cd deploy-package
        source ../venv/bin/activate
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from mcpdemo.math_server import mcp
        print('‚úÖ Math MCP Server loaded successfully')
        print('Server name:', mcp.name)
        print('Math server import test passed')
        "
    
    - name: Test ASGI app creation
      run: |
        cd deploy-package
        source ../venv/bin/activate
        python -c "
        from app import asgi_app
        print('‚úÖ ASGI app created successfully:', type(asgi_app))
        "
    
    - name: Create deployment archive
      run: |
        cd deploy-package
        zip -r ../math-server-deploy.zip .
        cd ..
        ls -la math-server-deploy.zip
    
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: math-server-package
        path: math-server-deploy.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: math-server-package
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Ensure Azure resources exist
      uses: azure/CLI@v2
      with:
        inlineScript: |
          # Check if App Service exists
          if ! az webapp show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }} > /dev/null 2>&1; then
            echo "Creating App Service..."
            
            # Ensure App Service Plan exists
            if ! az appservice plan show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name plan-math-mcp > /dev/null 2>&1; then
              echo "Creating App Service Plan..."
              az appservice plan create \
                --name plan-math-mcp \
                --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
                --sku B1 \
                --is-linux
            fi
            
            # Create App Service
            az webapp create \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --plan plan-math-mcp \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --runtime "PYTHON:${{ env.PYTHON_VERSION }}"
          else
            echo "‚úÖ App Service already exists"
          fi
    
    - name: Configure App Service settings
      uses: azure/CLI@v2
      with:
        inlineScript: |
          # Configure application settings
          az webapp config appsettings set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --settings \
              SCM_DO_BUILD_DURING_DEPLOYMENT=true \
              ENABLE_ORYX_BUILD=true \
              PYTHON_VERSION=${{ env.PYTHON_VERSION }} \
              TRANSPORT=streamable-http
          
          # Set startup command
          az webapp config set \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --startup-file "gunicorn --config gunicorn.conf.py app:asgi_app"
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        resource-group-name: ${{ env.AZURE_RESOURCE_GROUP }}
        package: math-server-deploy.zip
    
    - name: Post-deployment health check
      uses: azure/CLI@v2
      with:
        inlineScript: |
          # Wait for deployment to settle
          echo "‚è≥ Waiting for deployment to complete..."
          sleep 60
          
          # Restart application for clean startup
          echo "üîÑ Restarting application..."
          az webapp restart --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }}
          
          # Wait for restart
          sleep 30
          
          # Health check
          APP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "üè• Testing application health at: $APP_URL"
          
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL || echo "000")
          echo "HTTP Status Code: $STATUS_CODE"
          
          if [ "$STATUS_CODE" = "503" ]; then
            echo "‚ùå Application failed to start (503 Service Unavailable)"
            exit 1
          elif [ "$STATUS_CODE" = "000" ]; then
            echo "‚ùå Application is not responding"
            exit 1
          else
            echo "‚úÖ Application is responding (Status: $STATUS_CODE)"
          fi
          
          echo ""
          echo "üéâ Deployment completed successfully!"
          echo "üîó Application URL: $APP_URL"

  verify:
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: Verify deployment
      run: |
        APP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        
        echo "üîç Verifying Math MCP Server deployment..."
        echo "üìç Application URL: $APP_URL"
        
        # Test basic connectivity
        echo "Test 1: Basic connectivity"
        curl -f $APP_URL --max-time 30 || echo "Basic connectivity test completed"
        
        # Test MCP endpoints (if available)
        echo "Test 2: MCP endpoints"
        curl -s $APP_URL/tools --max-time 10 || echo "Tools endpoint test completed"
        
        echo ""
        echo "‚úÖ Verification completed!"
        echo ""
        echo "üìä Deployment Summary:"
        echo "  - Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        echo "  - App Service: ${{ env.AZURE_WEBAPP_NAME }}"
        echo "  - Python Version: ${{ env.PYTHON_VERSION }}"
        echo "  - Application URL: $APP_URL"
        echo ""
        echo "üéØ Your Math MCP Server is now live!"