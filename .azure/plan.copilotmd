# Azure Deployment Plan for FastMCP Servers Project

## **Goal**
Deploy three FastMCP servers (math, weather, directory) to Azure Container Apps using streamable-http transport for production hosting with Azure Developer CLI (azd).

## **Project Information**
**AppName**: mcpdemo-servers
- **Technology Stack**: Python 3.11 with FastMCP framework
- **Application Type**: Three independent MCP servers providing different functionality
  - **Math Server**: Basic arithmetic operations (add, divide, multiply)
  - **Weather Server**: Mock weather data retrieval by location
  - **Directory Server**: File system operations (read, write, list directories)
- **Containerization**: Will be containerized with Docker for Azure Container Apps
- **Transport**: Streamable-HTTP transport for RESTful web API accessibility
- **Dependencies**: FastMCP, Python runtime, no external databases
- **Hosting Recommendation**: Azure Container Apps for scalable, serverless container hosting

## **Azure Resources Architecture**
> **Install the mermaid extension in IDE to view the architecture.**

```mermaid
graph TB
    subgraph "Azure Container Apps Environment"
        Math[Math MCP Server<br/>Container App]
        Weather[Weather MCP Server<br/>Container App]
        Directory[Directory MCP Server<br/>Container App]
    end
    
    subgraph "Supporting Services"
        ACR[Azure Container Registry]
        AI[Application Insights]
        LAW[Log Analytics Workspace]
        MI[User Managed Identity]
    end
    
    subgraph "External Access"
        Client[MCP Clients<br/>Claude Desktop/API]
    end
    
    ACR -->|Container Images| Math
    ACR -->|Container Images| Weather
    ACR -->|Container Images| Directory
    
    Math -->|Logs & Metrics| AI
    Weather -->|Logs & Metrics| AI
    Directory -->|Logs & Metrics| AI
    
    AI -->|Centralized Logging| LAW
    
    MI -->|AcrPull Role| ACR
    Math -->|Uses| MI
    Weather -->|Uses| MI
    Directory -->|Uses| MI
    
    Client -->|HTTPS/HTTP| Math
    Client -->|HTTPS/HTTP| Weather
    Client -->|HTTPS/HTTP| Directory
```

**Data Flow:**
- Container apps pull their images from Azure Container Registry using managed identity
- Each server accepts HTTP requests on their designated endpoints
- All telemetry and logs are centralized through Application Insights and Log Analytics
- External clients (Claude Desktop, APIs) connect via HTTPS to each server's public endpoint

## **Recommended Azure Resources**

**Application Services:**
- **Math MCP Server**
  - Hosting Service Type: Azure Container Apps
  - SKU: Consumption plan (0.5 vCPU, 1GB memory) - auto-scales from 0 to 10 replicas
  - Configuration:
    - Language: Python 3.11
    - DockerFilePath: ./math.Dockerfile
    - DockerContext: .
    - Environment Variables:
      - `SERVER_TYPE=math`
      - `TRANSPORT=http`
      - `PORT=8000`

- **Weather MCP Server**
  - Hosting Service Type: Azure Container Apps
  - SKU: Consumption plan (0.5 vCPU, 1GB memory) - auto-scales from 0 to 10 replicas
  - Configuration:
    - Language: Python 3.11
    - DockerFilePath: ./weather.Dockerfile
    - DockerContext: .
    - Environment Variables:
      - `SERVER_TYPE=weather`
      - `TRANSPORT=http`
      - `PORT=8001`

- **Directory MCP Server**
  - Hosting Service Type: Azure Container Apps
  - SKU: Consumption plan (0.5 vCPU, 1GB memory) - auto-scales from 0 to 10 replicas
  - Configuration:
    - Language: Python 3.11
    - DockerFilePath: ./directory.Dockerfile
    - DockerContext: .
    - Environment Variables:
      - `SERVER_TYPE=directory`
      - `TRANSPORT=http`
      - `PORT=8002`

**Supporting Services:**
- **Azure Container Registry**
  - SKU: Basic (5GB storage, 10GB transfer/month)
  - Purpose: Store Docker images for all three servers

- **Application Insights**
  - SKU: Standard (pay-per-use)
  - Purpose: Centralized application monitoring and telemetry

- **Log Analytics Workspace**
  - SKU: Pay-per-GB (first 5GB free)
  - Purpose: Centralized logging for all container apps

**Security Configurations:**
- **User Managed Identity**: Assigned to all container apps for secure registry access
- **AcrPull Role Assignment**: Managed identity has AcrPull role (7f951dda-4ed3-4680-a7ca-43fe172d538d) on container registry
- **HTTPS Endpoints**: All servers exposed via HTTPS for secure communication
- **Network Security**: Container Apps environment with ingress controls

## **Execution Steps**
> **Below are the steps for Copilot to follow; ask Copilot to update or execute this plan.**

1. **Prepare Application for Deployment:**
   1. Modify servers to support HTTP/SSE transport
   2. Create individual Dockerfiles for each server
   3. Create azd configuration files
   4. Test local containerization

2. **Provision Azure Infrastructure And Deploy Applications:**
   1. Get IaC rules from the `iac-rules-get` tool
   2. Generate Bicep files for required Azure resources
   3. Pre-check: Use `get_errors` tool to validate Bicep syntax
   4. Run `azd up` to provision resources and deploy
   5. Verify resource creation and deployment success
   6. Check application logs with `azd-app-log-get` tool

3. **Post-Deployment Validation:**
   1. Test HTTP endpoints for each server
   2. Verify MCP tool functionality via HTTP calls
   3. Check Application Insights telemetry
   4. Validate auto-scaling behavior

4. **Documentation and Summary:**
   1. Create deployment summary with resource URLs
   2. Document API endpoints and usage examples
   3. Save summary to '.azure/summary.copilotmd'