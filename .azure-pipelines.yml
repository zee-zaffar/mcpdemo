# Azure DevOps Pipeline for Math MCP Server Deployment
# Triggers on merge to main branch

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - src/mcpdemo/math_server.py
    - requirements.txt
    - app.py
    - gunicorn.conf.py
    - startup.py

# No PR triggers for this pipeline
pr: none

variables:
  # Azure Service Connection name (to be created in Azure DevOps)
  azureServiceConnection: 'azure-mcp-service-connection'
  
  # Azure App Service details
  resourceGroupName: 'rg-test-zee'
  appServiceName: 'app-math-zee'
  appServicePlan: 'plan-math-mcp'
  
  # Python version
  pythonVersion: '3.11'
  
  # Build configuration
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: 'Build and Package'
  jobs:
  - job: BuildJob
    displayName: 'Build Math MCP Server'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - checkout: self
      displayName: 'Checkout Repository'
    
    - task: UsePythonVersion@0
      displayName: 'Use Python $(pythonVersion)'
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true
        architecture: 'x64'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install Dependencies'
    
    - script: |
        # Create deployment package structure
        mkdir -p $(Build.ArtifactStagingDirectory)/deploy-package
        
        # Copy application files
        cp app.py $(Build.ArtifactStagingDirectory)/deploy-package/
        cp requirements.txt $(Build.ArtifactStagingDirectory)/deploy-package/
        cp gunicorn.conf.py $(Build.ArtifactStagingDirectory)/deploy-package/
        cp startup.py $(Build.ArtifactStagingDirectory)/deploy-package/
        cp web.config $(Build.ArtifactStagingDirectory)/deploy-package/
        
        # Copy source code
        cp -r src/ $(Build.ArtifactStagingDirectory)/deploy-package/
        
        # Verify package contents
        echo "=== Deployment Package Contents ==="
        find $(Build.ArtifactStagingDirectory)/deploy-package -type f
      displayName: 'Create Deployment Package'
    
    - script: |
        # Test the math server locally
        cd $(Build.ArtifactStagingDirectory)/deploy-package
        python -c "
        import sys
        sys.path.insert(0, 'src')
        from mcpdemo.math_server import mcp
        print('Math MCP Server loaded successfully')
        print('Available tools:', [tool.name for tool in mcp.tools])
        "
      displayName: 'Test Math Server Import'
    
    - script: |
        # Test ASGI app creation
        cd $(Build.ArtifactStagingDirectory)/deploy-package
        python -c "
        from app import asgi_app
        print('ASGI app created successfully:', type(asgi_app))
        "
      displayName: 'Test ASGI App Creation'
    
    - task: ArchiveFiles@2
      displayName: 'Create Deployment Archive'
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/deploy-package'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/math-server-deploy.zip'
        replaceExistingArchive: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Deployment Artifact'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/math-server-deploy.zip'
        artifactName: 'math-server-package'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployJob
    displayName: 'Deploy Math MCP Server'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'production'
    
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: none
          
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Deployment Package'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'math-server-package'
              downloadPath: '$(Pipeline.Workspace)'
          
          - task: AzureCLI@2
            displayName: 'Ensure Azure Resources Exist'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Check if App Service exists, create if it doesn't
                if ! az webapp show --resource-group $(resourceGroupName) --name $(appServiceName) > /dev/null 2>&1; then
                  echo "Creating App Service..."
                  az webapp create \
                    --resource-group $(resourceGroupName) \
                    --plan $(appServicePlan) \
                    --name $(appServiceName) \
                    --runtime "PYTHON:$(pythonVersion)"
                else
                  echo "App Service already exists"
                fi
          
          - task: AzureCLI@2
            displayName: 'Configure App Service Settings'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Configure application settings
                az webapp config appsettings set \
                  --resource-group $(resourceGroupName) \
                  --name $(appServiceName) \
                  --settings \
                    SCM_DO_BUILD_DURING_DEPLOYMENT=true \
                    ENABLE_ORYX_BUILD=true \
                    PYTHON_VERSION=$(pythonVersion) \
                    TRANSPORT=streamable-http
                
                # Set startup command
                az webapp config set \
                  --resource-group $(resourceGroupName) \
                  --name $(appServiceName) \
                  --startup-file "gunicorn --config gunicorn.conf.py app:asgi_app"
          
          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              appType: 'webAppLinux'
              appName: '$(appServiceName)'
              resourceGroupName: '$(resourceGroupName)'
              package: '$(Pipeline.Workspace)/math-server-package/math-server-deploy.zip'
              deploymentMethod: 'zipDeploy'
          
          - task: AzureCLI@2
            displayName: 'Post-Deployment Health Check'
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Wait for deployment to complete
                echo "Waiting for application to start..."
                sleep 60
                
                # Restart the app to ensure clean startup
                echo "Restarting application..."
                az webapp restart --resource-group $(resourceGroupName) --name $(appServiceName)
                
                # Wait for restart
                sleep 30
                
                # Check application health
                APP_URL="https://$(appServiceName).azurewebsites.net"
                echo "Testing application at: $APP_URL"
                
                # Test basic connectivity (may return 404, but should not be 503)
                STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL || echo "000")
                echo "HTTP Status Code: $STATUS_CODE"
                
                if [ "$STATUS_CODE" = "503" ]; then
                  echo "‚ùå Application failed to start (503 Service Unavailable)"
                  exit 1
                elif [ "$STATUS_CODE" = "000" ]; then
                  echo "‚ùå Application is not responding"
                  exit 1
                else
                  echo "‚úÖ Application is responding (Status: $STATUS_CODE)"
                fi
                
                echo "Deployment completed successfully!"
                echo "Application URL: $APP_URL"

- stage: Verify
  displayName: 'Verify Deployment'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: VerifyJob
    displayName: 'Verify Math MCP Server'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - task: AzureCLI@2
      displayName: 'Run Application Tests'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          APP_URL="https://$(appServiceName).azurewebsites.net"
          
          echo "=== Math MCP Server Deployment Verification ==="
          echo "Application URL: $APP_URL"
          
          # Test 1: Basic connectivity
          echo "Test 1: Basic connectivity"
          curl -f $APP_URL || echo "Basic connectivity test completed"
          
          # Test 2: Check if it's an MCP server (look for MCP-related endpoints)
          echo "Test 2: MCP Server verification"
          # FastMCP servers typically expose certain endpoints
          curl -s $APP_URL/tools || echo "Tools endpoint test completed"
          
          echo "‚úÖ Verification completed successfully!"
          echo ""
          echo "üìä Deployment Summary:"
          echo "  - Resource Group: $(resourceGroupName)"
          echo "  - App Service: $(appServiceName)"
          echo "  - Python Version: $(pythonVersion)"
          echo "  - Application URL: $APP_URL"
          echo ""
          echo "üîó Access your Math MCP Server at: $APP_URL"